{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/MuhammadGhufroon/MuhammadGhufroon/blob/main/Source%20Code%20Classification\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ukvo4kWMAUyS"
      },
      "source": [
        "# ___\n",
        "<a href='https://nevtik.org'><img src='https://drive.google.com/uc?export=view&id=1_IP9MG7FF0p0Ah9q4ptR46StNwCSKFJV' style= width:100px></a>\n",
        "___"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A05S0WDAAUyW"
      },
      "source": [
        "# Data Science Week 8-9 : Classification\n",
        "Sebelumnya, kita telah berhasil membuat model untuk memprediksi dataset dengan karakteristik data kontinu menggunakan Linear Regression dan Random Forest.\n",
        "\n",
        "Sekarang saatnya kita masuk ke pembahasan berikutnya dari *Supervised Learning*, yaitu ***Classification*** atau ***Klasifikasi***, klasifikasi adalah metode dalam *machine learning* untuk memprediksi kelas atau dataset yang memiliki karakter data diskrit, seperti Ya atau Tidak, Benar atau Salah, apakah data tersebut masuk ke kelas A atau kelas B, apakah suatu email merupakan spam atau bukan.\n",
        "\n",
        "<a ><img src='https://www.edureka.co/blog/wp-content/uploads/2019/11/classification.png' style= width:300px></a>\n",
        "<center>Perbedaan Regresi dan Klasifikasi</center>\n",
        "<a ><img src='https://miro.medium.com/max/3200/1*ASYpFfDh7XnreU-ygqXonw.png' style= width:300px></a>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lqy_DcnCAUyX"
      },
      "source": [
        "# K-Nearest Neighbor\n",
        "Salah satu algoritma yang mudah digunakan dalam membuat model *machine learning* adalah ***K-Nearest Neighbor***.\n",
        "\n",
        "***K-Nearest Neighbor*** bekerja dengan sekumpulan data yang sudah memiliki kelas (data diskrit), dimana hasil *query instance* yang baru atau data baru yang akan diprediksi diklasifikasikan berdasarkan mayoritas kedekatan jarak antar data. Mudahnya K-Nearest Neighbor akan mengklasifikasikan data berdasarkan jumlah tetangga terdekat dari data yang ingin diprediksi tersebut.\n",
        "\n",
        "Huruf K, maksudnya adalah berapa jumlah tetanga terdekat yang kita atur, misalnya jika kita menginginkan agar model kita mengklasifikasikan data berdasarkan 3 tetangga terdekat, maka itu dinamakan ***3-Nearest Neighbor***, jika 5 ***5-Nearest Neighbor***.<br><br>\n",
        "<a ><img src='https://miro.medium.com/max/700/1*2zYNhLc522h0zftD1zDh2g.png' style= width:300px></a><br>\n",
        "\n",
        "\n",
        "**<center>Analogi</center>**<br>\n",
        "Anda diundang ke sebuah pertemuan. Namun, Anda tidak tahu tema dari pertemuan tersebut, maupun kegiatan apa saja yang akan dilakukan di pertemuan tersebut. Anda benar-benar tidak tahu apakah pertemuan itu akan bermanfaat atau tidak untuk Anda. Yang Anda tahu, beberapa orang teman Anda juga diundang ke acara yang sama. Dalam kondisi seperti itu, apa yang Anda lakukan?\n",
        "\n",
        "Cara yang biasanya dilakukan oleh banyak orang dalam menangani masalah seperti itu adalah dengan bertanya kepada teman-teman apakah mereka akan datang ke pertemuan tersebut atau tidak. Biasanya, orang-orang yang pertama ditanya adalah orang-orang yang dekat dengan Anda. Maka, Anda mencoba mengontak enam orang teman yang biasa jadi teman main Anda. Dari enam orang tersebut, empat orang menyatakan akan datang, tapi dua orang ternyata memutuskan tidak datang, entah mengapa alasannya. Karena mayoritas teman yang bisa Anda hubungi memutuskan akan datang, maka Anda pun juga memutuskan untuk datang."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LXJss1HYAUya"
      },
      "source": [
        "# 1. Data Preprocessing\n",
        "Kali ini, kita akan menggunakan dataset Iris, yang biasa digunakan bagi pemula untuk belajar klasifikasi. Contoh kasus disini kita akan mengklasifikasikan berdasarkan 3 jenis bunga iris, yaitu : setosa, versicolor, dan virginica. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2o0TKGrFAUyb"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Q3fDFWxHAUyc"
      },
      "outputs": [],
      "source": [
        "df  = pd.read_csv('iris.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qRWKTFK1AUyd"
      },
      "outputs": [],
      "source": [
        "df.rename(columns={\n",
        "    'SepalLengthCm':'sepal_len',\n",
        "    'SepalWidthCm':'sepal_wd',\n",
        "    'PetalLengthCm':'petal_len',\n",
        "    'PetalWidthCm':'petal_wd',\n",
        "    'Species':'species'\n",
        "}, inplace=True)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hqJJMjrtAUye",
        "outputId": "e630707e-34f5-4959-f096-d40b8c1886a0"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Id</th>\n",
              "      <th>sepal_len</th>\n",
              "      <th>sepal_wd</th>\n",
              "      <th>petal_len</th>\n",
              "      <th>petal_wd</th>\n",
              "      <th>species</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>5.1</td>\n",
              "      <td>3.5</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>4.9</td>\n",
              "      <td>3.0</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>4.7</td>\n",
              "      <td>3.2</td>\n",
              "      <td>1.3</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>4.6</td>\n",
              "      <td>3.1</td>\n",
              "      <td>1.5</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>5.0</td>\n",
              "      <td>3.6</td>\n",
              "      <td>1.4</td>\n",
              "      <td>0.2</td>\n",
              "      <td>Iris-setosa</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Id  sepal_len  sepal_wd  petal_len  petal_wd      species\n",
              "0   1        5.1       3.5        1.4       0.2  Iris-setosa\n",
              "1   2        4.9       3.0        1.4       0.2  Iris-setosa\n",
              "2   3        4.7       3.2        1.3       0.2  Iris-setosa\n",
              "3   4        4.6       3.1        1.5       0.2  Iris-setosa\n",
              "4   5        5.0       3.6        1.4       0.2  Iris-setosa"
            ]
          },
          "execution_count": 6,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DNoY3WvHAUyg"
      },
      "source": [
        "Dengan membuat plot distribusi, ini memberi kita gambaran yang lebih jelas tentang distribusi variabel input atau independent variable, yang menunjukkan bahwa panjang sepal dan lebar sepal memiliki distribusi normal (Gaussian). Artinya, distribusinya memiliki bentuk lonceng simetris. Namun, panjang petal bunganya tidak normal. Plotnya menunjukkan dua mode, satu puncak terjadi di dekat 0 dan yang lainnya di sekitar 5. Lebih sedikit pola yang diamati untuk lebar kelopak."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kpeAUhgzAUyh",
        "outputId": "67e1bd6f-c754-48e1-881a-a22070076916"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 432x288 with 6 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light",
            "tags": []
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "df.hist()\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sk9Qz1jRAUyi"
      },
      "source": [
        "Sekarang kita akan membuat scatter plot untuk melihat sebarannya, namun agar lebih jelas masing-masing plot dibedakan berdasarkan warna dengan klasifikasi jenis bunga"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RG0eqLEyAUyi",
        "outputId": "bc08ce3c-bc7b-422a-c666-f9103458e785"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<matplotlib.legend.Legend at 0x1d56ba6ed60>"
            ]
          },
          "execution_count": 11,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXUAAAD7CAYAAACVMATUAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nOydd3hUxfrHP7NneyohoSMB6RCKVBEUUQFpioAgiCIKKnItWLBcvYr1Kl77lYsFwYKFnyAqSgdBVHrvVTokgbTtu/P7Y0Mg2V3YhE1lPs+TJ8nMOTPvObv77pyZ77yvkFKiUCgUioqBrrQNUCgUCkXkUE5doVAoKhDKqSsUCkUFQjl1hUKhqEAop65QKBQVCOXUFQqFogIRtlMXQmhCiHVCiJ+C1HUVQmQIIdbn/jwXWTMVCoVCEQ76Qhz7ELANiA1Rv0xK2efiTVIoFApFUQnLqQshagG9gZeBcZHoODExUSYnJ0eiKYVCobhkWLNmTaqUMilUfbgj9beBJ4CY8xxzpRBiA3AEeExKueV8DSYnJ7N69eowu1coFAoFgBDiwPnqLzinLoToA5yQUq45z2FrgTpSypbAe8CsEG2NFkKsFkKsPnny5IW6VigUCkUhCWeh9CqgnxBiP/A10E0I8cW5B0gpM6WU2bl/zwEMQojEgg1JKSdLKdtKKdsmJYV8elAoFApFEbmgU5dSPiWlrCWlTAaGAIuklLefe4wQopoQQuT+3T633bRisFehUCgU56Ew6pd8CCHuA5BSTgIGAvcLITyAHRgiVfhHhaJc4Ha7OXToEA6Ho7RNUZyD2WymVq1aGAyGQp0nSsv3tm3bVqqFUsUZ7DkO9qzbR0xCNHWa1i5tcy4p9u3bR0xMDJUrVyb3gVtRykgpSUtLIysri7p16+arE0KskVK2DXVukUfqCkWk+GnyfCaNm4qm1+H1+KhxeVVe+ukpqtQOWJZRFAMOh4Pk5GTl0MsQQggqV65MUQQlKkyAolTZ/Pt2Jo37DKfNiS3TjtPm5MDWQzx948uoGbySQzn0skdRXxPl1BWlyqx35+Cyu/KV+bw+jh84yd6N55XjKhSKICinrihV0o+dJtiAXNNrZKRmlbxBilIhOjo6ZF2nTp2Krd9XXnml2NouLZRTV5QqHfu2xWgxBpS7nR4ata1XChYpLsTCr5YxLPl+umu3Miz5fhZ+taxY+vF6vQCsWLGiWNoH5dQViojT594bSKxRCaP5rGzLZDUx4sXBRMVFlaJlimAs/GoZb42exIm/U5FScuLvVN4aPSlijn3JkiVce+21DB06lJSUFODsKP7o0aNcffXVtGrViubNm7NsWWCfW7ZsoX379rRq1YoWLVqwa9cuAL744ou88nvvvRev18uTTz6J3W6nVatWDBs2DID//Oc/NG/enObNm/P2228DkJOTQ+/evWnZsiXNmzfnm2++AWDChAm0a9eO5s2bM3r06LKzBiSlLJWfNm3aSIVCSimzM3Lk9Fe/l2M7PiX/2fdVuWb+htI26ZJi69atYR87tM598noxMOBnaJ37LsqGqKgoKaWUixcvllarVe7duzegbuLEifKll16SUkrp8XhkZmZmQDtjx46VX3zxhZRSSqfTKW02m9y6davs06ePdLlcUkop77//fjl16tR8bUsp5erVq2Xz5s1ldna2zMrKkk2bNpVr166VM2bMkPfcc0/ecadPn5ZSSpmWlpZXdvvtt8vZs2df1D0IRrDXBlgtz+NblaRRUepExVoZ8mR/hjzZv7RNUVyAkweDbxQPVV4U2rdvH6DNBmjXrh0jR47E7XZz880306pVq4BjrrzySl5++WUOHTrELbfcQoMGDVi4cCFr1qyhXbt2ANjtdqpUqRJw7vLly+nfvz9RUf4nxFtuuYVly5bRs2dPHnvsMcaPH0+fPn3o0qULAIsXL+b111/HZrORnp5Os2bN6Nu3b8TuQ1FR0y8KhSJskmpXLlR5UTjjVAty9dVX89tvv1GzZk2GDx/OtGnTmDlzJq1ataJVq1asXr2aoUOHMnv2bCwWCz169GDRokVIKbnzzjtZv34969evZ8eOHTz//PMB7csQ0ycNGzZkzZo1pKSk8NRTTzFhwgQcDgdjxoxhxowZbNq0iVGjRpWZHbnKqSsUirAZ+cpQTNb8C9smq5GRrwwt9r4PHDhAlSpVGDVqFHfffTdr166lf//+ec66bdu27N27l3r16vHggw/Sr18/Nm7cyHXXXceMGTM4ceIEAOnp6Rw44JfLGgwG3G434P/SmDVrFjabjZycHGbOnEmXLl04cuQIVquV22+/nccee4y1a9fmOfDExESys7OZMWNGsV9/uKjpF4VCETbXDfVPPXz69FecPJhGUu3KjHxl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",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light",
            "tags": []
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "inv_name_dict = {'Iris-setosa':0,\n",
        "                'Iris-versicolor':1,\n",
        "                'Iris-virginica':2}\n",
        "\n",
        "colors = [inv_name_dict[item] for item in df['species']]\n",
        "\n",
        "scatter = plt.scatter(df['sepal_len'],df['sepal_wd'], c= colors)\n",
        "plt.legend(handles=scatter.legend_elements()[0],labels = inv_name_dict.keys())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mvnXYH8BAUyj"
      },
      "source": [
        "Dari grafik diatas, kita membuat scatter berdasarkan panjang dan lebar sepal, namun grafik kita menunjukan bahwa data kita masih kurang stabil dan sangat memiliki outliers yang sensitif. \n",
        "\n",
        "Sekarang kita coba buat scatter berdasarkan panjang dan lebar petal"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8JdFlGh7AUyk",
        "outputId": "4b67489f-ae15-44c6-efb4-ba0e4e0fc482"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'petal width')"
            ]
          },
          "execution_count": 7,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light",
            "tags": []
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "scatter = plt.scatter(df['petal_len'],df['petal_wd'], c = colors)\n",
        "plt.xlabel('petal length')\n",
        "plt.ylabel('petal width')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j2HZapRLAUyk"
      },
      "source": [
        "Ternyata panjang dan lebar petal memiliki sebaran yang stabil, linear, dan tidak memiliki outlier yang terlalu sensitif. Jadi, kita bisa menggunakan dua variabel itu sebagai fitur."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "z5xEF2FWAUyk"
      },
      "outputs": [],
      "source": [
        "y = df['species']\n",
        "X  = df[['petal_len','petal_wd']]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZDovHRmUAUyk"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "gLCVJ14xAUyl"
      },
      "source": [
        "Gunakan hyperparameter stratify untuk membagi kelas dengan bobot yang setara\n",
        "\n",
        "Berikut adalah splitting data jika tidak menggunakan stratify"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_3Im0Z06AUyl",
        "outputId": "7242f102-ee9f-4225-b617-f1b82bb44034"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Iris-virginica     39\n",
            "Iris-versicolor    36\n",
            "Iris-setosa        30\n",
            "Name: species, dtype: int64\n",
            "Iris-setosa        20\n",
            "Iris-versicolor    14\n",
            "Iris-virginica     11\n",
            "Name: species, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,\n",
        "                                                   random_state=12)\n",
        "print(y_train.value_counts())\n",
        "print(y_test.value_counts())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RMR70O1lAUym"
      },
      "source": [
        "Dan berikut adalah splitting data dengan hyperparameter stratify, tiap kelas akan memiliki bobot yang sama"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S1tVLb-HAUym",
        "outputId": "5ddeb994-3b62-4b6e-e823-90ded2a96ce7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Iris-virginica     35\n",
            "Iris-versicolor    35\n",
            "Iris-setosa        35\n",
            "Name: species, dtype: int64\n",
            "Iris-virginica     15\n",
            "Iris-versicolor    15\n",
            "Iris-setosa        15\n",
            "Name: species, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3,\n",
        "                                                   random_state=12,\n",
        "                                                   stratify=y)\n",
        "print(y_train.value_counts())\n",
        "print(y_test.value_counts())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SxZqtsvTAUyn"
      },
      "outputs": [],
      "source": [
        "from sklearn.neighbors import KNeighborsClassifier as knn # import knn"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9hyIFI8sAUyn"
      },
      "outputs": [],
      "source": [
        "model = knn(n_neighbors = 5) # atur hyperparameter n_neighbors menjadi 5, sehingga model adalah 5-nearest neighbors"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "WTBm9mF3AUyn",
        "outputId": "fb273186-3c82-46a6-c5b0-596a5125f06b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "KNeighborsClassifier()"
            ]
          },
          "execution_count": 29,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model.fit(X_train, y_train)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p_KTn8vcAUyo"
      },
      "outputs": [],
      "source": [
        "pred = model.predict(X_test)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "h2vvMcZ7AUyo",
        "outputId": "67698106-4bec-4f44-927b-c4091682c0ec"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "102     Iris-virginica\n",
            "13         Iris-setosa\n",
            "122     Iris-virginica\n",
            "70     Iris-versicolor\n",
            "107     Iris-virginica\n",
            "Name: species, dtype: object\n",
            "\n",
            "['Iris-virginica' 'Iris-setosa' 'Iris-virginica' 'Iris-virginica'\n",
            " 'Iris-virginica']\n"
          ]
        }
      ],
      "source": [
        "print(y_test[:5])\n",
        "print()\n",
        "print(pred[:5])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gVQ55M-AAUyo",
        "outputId": "ae33f302-b7ab-4bb1-f0dc-2a21559e6264"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0. , 0. , 1. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [0. , 1. , 0. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [0. , 0.8, 0.2],\n",
              "       [0. , 0. , 1. ],\n",
              "       [0. , 1. , 0. ],\n",
              "       [0. , 1. , 0. ],\n",
              "       [0. , 1. , 0. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [0. , 1. , 0. ],\n",
              "       [0. , 1. , 0. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [0. , 1. , 0. ],\n",
              "       [0. , 1. , 0. ],\n",
              "       [0. , 1. , 0. ],\n",
              "       [0. , 1. , 0. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [0. , 0.2, 0.8],\n",
              "       [0. , 1. , 0. ],\n",
              "       [0. , 0. , 1. ],\n",
              "       [1. , 0. , 0. ],\n",
              "       [0. , 0.6, 0.4],\n",
              "       [0. , 1. , 0. ],\n",
              "       [0. , 0. , 1. ]])"
            ]
          },
          "execution_count": 33,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        }
      ],
      "source": [
        "model.predict_proba(X_test) #menghitung persentasi kemungkinan klasifikasi\n",
        "# 0 = setosa\n",
        "# 1 = versicolor\n",
        "# 2 = virginica"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "DFz6QBgNAUyp",
        "outputId": "b6df443e-e038-4147-d9d5-4a5fc95ab712"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "97.77777777777777\n",
            "0.9777777777777777\n"
          ]
        }
      ],
      "source": [
        " # menghitung akurasi\n",
        "print((pred==y_test.values).sum()/y_test.size *100)\n",
        "#atau\n",
        "print(model.score(X_test, y_test))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BpKZsGu8AUyp",
        "outputId": "6dde5b9d-5408-4f0a-e0d3-183b0fed9eae"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[15,  0,  0],\n",
              "       [ 0, 14,  1],\n",
              "       [ 0,  0, 15]], dtype=int64)"
            ]
          },
          "execution_count": 38,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# confusion matrix\n",
        "from sklearn.metrics import confusion_matrix\n",
        "\n",
        "cm = confusion_matrix(y_test, pred, labels=[\"Iris-setosa\",\"Iris-versicolor\",\"Iris-virginica\"])\n",
        "cm"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ba_8X4kyAUyp",
        "outputId": "a38a9479-d004-4431-b4e7-6ec1d6fcc43d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<sklearn.metrics._plot.confusion_matrix.ConfusionMatrixDisplay at 0x1d56b6faeb0>"
            ]
          },
          "execution_count": 39,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "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",
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light",
            "tags": []
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# grafik confusion matrix\n",
        "from sklearn.metrics import plot_confusion_matrix as pcm\n",
        "pcm(model, X_test, y_test, cmap=plt.cm.Blues)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "km2IDfH2AUyr"
      },
      "outputs": [],
      "source": [
        "# menghitung nilai cross validation score\n",
        "from sklearn.model_selection import cross_val_score\n",
        "knn_cv = knn(n_neighbors=3)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A_ZVLogVAUyr"
      },
      "outputs": [],
      "source": [
        "cv_scores = cross_val_score(knn_cv, X, y, cv=5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rETfpz9XAUyr",
        "outputId": "e8059de7-bb9e-43a4-adf9-757766d8043d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[0.96666667 0.96666667 0.9        0.93333333 1.        ]\n"
          ]
        }
      ],
      "source": [
        "print(cv_scores)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qPgW-ohnAUyr"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "knn2 = knn()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "M7mZVhXaAUyr"
      },
      "outputs": [],
      "source": [
        "param_grid = {'n_neighbors' : np.arange(2,10)}"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kaRMGpWXAUys"
      },
      "outputs": [],
      "source": [
        "knn_gscv = GridSearchCV(knn2, param_grid, cv=5)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6rtOY-1OAUys",
        "outputId": "8d79592b-2620-446b-ff91-07e5b8d62556"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=KNeighborsClassifier(),\n",
              "             param_grid={'n_neighbors': array([2, 3, 4, 5, 6, 7, 8, 9])})"
            ]
          },
          "execution_count": 46,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        }
      ],
      "source": [
        "knn_gscv.fit(X, y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jtMiOnPhAUyt",
        "outputId": "09331ea0-84ae-4fff-8168-e4f48da734a1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'n_neighbors': 4}"
            ]
          },
          "execution_count": 47,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        }
      ],
      "source": [
        "knn_gscv.best_params_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zilf5Fy-AUyt",
        "outputId": "c99a86cb-ae6f-4a34-9c06-2ef49035600c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9666666666666668"
            ]
          },
          "execution_count": 48,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        }
      ],
      "source": [
        "knn_gscv.best_score_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "U8lScTl_AUyt"
      },
      "outputs": [],
      "source": [
        "knn_final = knn(n_neighbors=knn_gscv.best_params_['n_neighbors'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eyCx3EFjAUyu",
        "outputId": "443be341-8aa8-4c51-c333-ebabea356eb1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "KNeighborsClassifier(n_neighbors=4)"
            ]
          },
          "execution_count": 50,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        }
      ],
      "source": [
        "knn_final.fit(X, y)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7TRclhGmAUyu"
      },
      "outputs": [],
      "source": [
        "y_pred = knn_final.predict(X)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "oAT4fjgFAUyw",
        "outputId": "71454676-cc17-46ad-ae50-311f7e917680"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.9733333333333334"
            ]
          },
          "execution_count": 52,
          "metadata": {
            "tags": []
          },
          "output_type": "execute_result"
        }
      ],
      "source": [
        "knn_final.score(X,y)"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Source Code Materi Data Science Minggu Ke 8-9.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.7"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}